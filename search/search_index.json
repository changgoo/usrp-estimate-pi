{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Estimate pi package This is a package created as part of the USRP exercise. Installation pip install estimate_pi","title":"Home"},{"location":"#welcome-to-estimate-pi-package","text":"This is a package created as part of the USRP exercise.","title":"Welcome to Estimate pi package"},{"location":"#installation","text":"pip install estimate_pi","title":"Installation"},{"location":"estimate_pi/","text":"Code reference estimate_pi ( ndarts ) Function that estimates pi using the 'throw of darts' method Parameters: Name Type Description Default ndarts int number of darts to throw required Returns: Name Type Description pi float An estimate for pi get_pi_accuracy ( nrea , nthrows ) Function that plots the mean and standard deviation of the results of nrea realisations of dart nthrows dart throws Parameters: Name Type Description Default nrea int number of realisations of throws for each number of throws required nthrows array array containing numbers of throws for which we want nrea realisations required Returns: Name Type Description mean array mean estimates std array errors is_in_unit_circle ( dart ) Checks if a dart is in the unit circle function that checks whether a coordinate dart is inside the unit circle Parameters: Name Type Description Default dart array Array of coordinates (dart positions) with size (2xn) required Returns: Name Type Description isincircle array ( boolean ) Array of size n set to True where dart is in the unit circle, false otherwise. make_realisation ( nrea , ndarts ) function that makes nrea realisations of ndarts dart throws and records the result Parameters: Name Type Description Default nrea int number of realisation required ndarts int number of darts thrown at each realisation required Returns: Name Type Description pies array array of the estimates of pi at each iteration throw ( ndarts ) Function that throws n darts This functions generates n sets of coordinates that are each drawn from a uniform distribution between -1 and 1 Parameters: Name Type Description Default ndarts int Number of coordinates to draw (darts to throw). required Returns: Name Type Description darts array array of size (2xn) with the coordinates of darts thrown.","title":"Code Reference"},{"location":"estimate_pi/#code-reference","text":"","title":"Code reference"},{"location":"estimate_pi/#estimate_pi.estimate_pi.estimate_pi","text":"Function that estimates pi using the 'throw of darts' method Parameters: Name Type Description Default ndarts int number of darts to throw required Returns: Name Type Description pi float An estimate for pi","title":"estimate_pi()"},{"location":"estimate_pi/#estimate_pi.estimate_pi.get_pi_accuracy","text":"Function that plots the mean and standard deviation of the results of nrea realisations of dart nthrows dart throws Parameters: Name Type Description Default nrea int number of realisations of throws for each number of throws required nthrows array array containing numbers of throws for which we want nrea realisations required Returns: Name Type Description mean array mean estimates std array errors","title":"get_pi_accuracy()"},{"location":"estimate_pi/#estimate_pi.estimate_pi.is_in_unit_circle","text":"Checks if a dart is in the unit circle function that checks whether a coordinate dart is inside the unit circle Parameters: Name Type Description Default dart array Array of coordinates (dart positions) with size (2xn) required Returns: Name Type Description isincircle array ( boolean ) Array of size n set to True where dart is in the unit circle, false otherwise.","title":"is_in_unit_circle()"},{"location":"estimate_pi/#estimate_pi.estimate_pi.make_realisation","text":"function that makes nrea realisations of ndarts dart throws and records the result Parameters: Name Type Description Default nrea int number of realisation required ndarts int number of darts thrown at each realisation required Returns: Name Type Description pies array array of the estimates of pi at each iteration","title":"make_realisation()"},{"location":"estimate_pi/#estimate_pi.estimate_pi.throw","text":"Function that throws n darts This functions generates n sets of coordinates that are each drawn from a uniform distribution between -1 and 1 Parameters: Name Type Description Default ndarts int Number of coordinates to draw (darts to throw). required Returns: Name Type Description darts array array of size (2xn) with the coordinates of darts thrown.","title":"throw()"},{"location":"usage/","text":"Basic usage Display a throw of 1000 darts: from estimate_pi.plot_tools import plot_darts plot_darts ( 1000 ) Distribution of the estimated pi import matplotlib.pyplot as plt import estimate_pi nthrows = [ 100 , 1000 , 10000 ] nreal = 1000 # number of realisations for nth in nthrows : r = estimate_pi . make_realisation ( nreal , nth ) plt . hist ( r , bins = 20 , label = ' {} darts' . format ( nth ), density = True , alpha = 0.5 ) plt . title ( 'distribution of pi estimates for various throws' ) plt . yscale ( 'log' ) plt . legend () Accuracy of the estimated pi import numpy as np import estimate_pi nthrows = np . logspace ( 1 , 5 , 5 ) . astype ( int ) nreal = 1000 pi_mean , pi_std = estimate_pi . get_pi_accuracy ( nreal , nthrows ) # convergence plot plt . title ( 'Convergence of Error' ) plt . plot ( nthrows , pi_std , 'o' ) plt . plot ( nthrows , 1 / np . sqrt ( nthrows ), label = r '$\\propto 1/N^{1/2}$' , ls = ':' ) plt . legend () plt . xscale ( 'log' ) plt . yscale ( 'log' ) plt . xlabel ( 'number of darts' ) plt . ylabel ( 'pi error' )","title":"Usage"},{"location":"usage/#basic-usage","text":"","title":"Basic usage"},{"location":"usage/#display-a-throw-of-1000-darts","text":"from estimate_pi.plot_tools import plot_darts plot_darts ( 1000 )","title":"Display a throw of 1000 darts:"},{"location":"usage/#distribution-of-the-estimated-pi","text":"import matplotlib.pyplot as plt import estimate_pi nthrows = [ 100 , 1000 , 10000 ] nreal = 1000 # number of realisations for nth in nthrows : r = estimate_pi . make_realisation ( nreal , nth ) plt . hist ( r , bins = 20 , label = ' {} darts' . format ( nth ), density = True , alpha = 0.5 ) plt . title ( 'distribution of pi estimates for various throws' ) plt . yscale ( 'log' ) plt . legend ()","title":"Distribution of the estimated pi"},{"location":"usage/#accuracy-of-the-estimated-pi","text":"import numpy as np import estimate_pi nthrows = np . logspace ( 1 , 5 , 5 ) . astype ( int ) nreal = 1000 pi_mean , pi_std = estimate_pi . get_pi_accuracy ( nreal , nthrows ) # convergence plot plt . title ( 'Convergence of Error' ) plt . plot ( nthrows , pi_std , 'o' ) plt . plot ( nthrows , 1 / np . sqrt ( nthrows ), label = r '$\\propto 1/N^{1/2}$' , ls = ':' ) plt . legend () plt . xscale ( 'log' ) plt . yscale ( 'log' ) plt . xlabel ( 'number of darts' ) plt . ylabel ( 'pi error' )","title":"Accuracy of the estimated pi"}]}